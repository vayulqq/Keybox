name: Keybox Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

jobs:
  decrypt-and-check-keybox:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y openssl curl gh

      - name: Download keybox.xml.enc
        run: |
          curl -fsSL https://raw.githubusercontent.com/MeowDump/Integrity-Box/main/keybox.xml.enc -o keybox.xml.enc
          [ -s "keybox.xml.enc" ] || exit 1

      - name: Decrypt keybox.xml.enc
        run: |
          [ -f "keybox.xml.enc" ] || exit 1
          openssl enc -aes-256-cbc -d -pbkdf2 -in keybox.xml.enc -out keybox.xml -k true || exit 1

      - name: Compute hash of new keybox.xml
        run: |
          [ -f "keybox.xml" ] || exit 1
          echo "NEW_HASH=$(sha256sum keybox.xml | awk '{print $1}')" >> $GITHUB_ENV

      - name: Check and download previous keybox.xml from release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view keybox --repo $GITHUB_REPOSITORY >/dev/null 2>&1; then
            gh release download keybox --repo $GITHUB_REPOSITORY --pattern "keybox.xml" --output keybox.xml.prev || exit 1
            [ -f "keybox.xml.prev" ] && echo "PREV_HASH=$(sha256sum keybox.xml.prev | awk '{print $1}')" >> $GITHUB_ENV || echo "PREV_HASH=" >> $GITHUB_ENV
          else
            echo "PREV_HASH=" >> $GITHUB_ENV
          fi

      - name: Compare hashes and decide action
        run: |
          if [ "${{ env.PREV_HASH }}" == "${{ env.NEW_HASH }}" ] && [ -n "${{ env.PREV_HASH }}" ]; then
            echo "SKIP_RELEASE=true" >> $GITHUB_ENV
          else
            echo "SKIP_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check keybox.xml with main.py
        id: check_keybox
        run: |
          keybox_path="$GITHUB_WORKSPACE/keybox.xml"
          [ -f "$keybox_path" ] || exit 1
          output=$(python main.py "$keybox_path")
          echo "KEYBOX_CHECK_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$output" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload keybox.xml as artifact
        if: env.SKIP_RELEASE == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: keybox
          path: keybox.xml

      - name: Create or update release with keybox.xml
        if: env.SKIP_RELEASE == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view keybox --repo $GITHUB_REPOSITORY >/dev/null 2>&1; then
            gh release edit keybox \
              --title "Keybox Release" \
              --notes "$KEYBOX_CHECK_OUTPUT" \
              --repo $GITHUB_REPOSITORY
          else
            gh release create keybox \
              --title "Keybox Release" \
              --notes "$KEYBOX_CHECK_OUTPUT" \
              --repo $GITHUB_REPOSITORY
          fi
          [ -f "keybox.xml" ] || exit 1
          gh release upload keybox keybox.xml --clobber --repo $GITHUB_REPOSITORY
